{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Aleksandre\\\\Assignment2\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport './App.css';\nimport { React, useState, useEffect } from 'react';\nimport Card from \"./components/Card\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst cardImages = [{\n  \"src\": \"/img/butterfly.jpg\",\n  matched: false\n}, {\n  \"src\": \"/img/cat.jpg\",\n  matched: false\n}, {\n  \"src\": \"/img/dog.jpg\",\n  matched: false\n}, {\n  \"src\": \"/img/hedgehog.jpg\",\n  matched: false\n}, {\n  \"src\": \"/img/panda.jpg\",\n  matched: false\n}, {\n  \"src\": \"/img/penguin.jpg\",\n  matched: false\n}, {\n  \"src\": \"/img/fish.jpg\",\n  matched: false\n}, {\n  \"src\": \"/img/flamingo.jpg\",\n  matched: false\n}];\nfunction App() {\n  _s();\n  const [cards, setCards] = useState([]);\n  const [moves, setMoves] = useState(0);\n  const [choiceOne, setChoiceOne] = useState(null);\n  const [choiceTwo, setChoiceTwo] = useState(null);\n  const [disabled, setDisabled] = useState(false);\n\n  // shuffles cards \n  const shuffleCards = () => {\n    const shuffledCards = [...cardImages, ...cardImages].sort(() => Math.random() - 0.5).map(card => ({\n      ...card,\n      id: Math.random()\n    }));\n    setCards(shuffledCards);\n    setMoves(0);\n    setChoiceOne(null);\n    setChoiceTwo(null);\n  };\n\n  // handle a choice\n  const handleChoice = card => {\n    choiceOne ? setChoiceTwo(card) : setChoiceOne(card);\n  };\n\n  // compare 2 selected cards\n  useEffect(() => {\n    if (choiceOne && choiceTwo) {\n      setDisabled(true);\n      if (choiceOne.src === choiceTwo.src) {\n        setCards(prevCards => {\n          return prevCards.map(card => {\n            if (card.src === choiceOne.src) {\n              setTimeout(() => 5000);\n              return {\n                ...card,\n                matched: true\n              };\n            } else {\n              return card;\n            }\n          });\n        });\n        resetMove();\n      } else {\n        setTimeout(() => resetMove(), 1250);\n      }\n    }\n  }, [choiceOne, choiceTwo]);\n  console.log(cards);\n\n  // reset moves & increase turn \n  const resetMove = () => {\n    setChoiceOne(null);\n    setChoiceTwo(null);\n    setMoves(prevMoves => prevMoves + 1);\n    setDisabled(false);\n  };\n\n  // start a game automatically on page visit\n  useEffect(() => {\n    shuffleCards();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Game of Memory: Animals\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: shuffleCards,\n      children: \" New Game \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n      children: [\"Moves: \", moves]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"board\",\n      children: cards.map(card => /*#__PURE__*/_jsxDEV(Card, {\n        card: card,\n        handleChoice: handleChoice,\n        flipped: card === choiceOne || card === choiceTwo || card.matched,\n        disabled: disabled\n      }, card.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 82,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"vMbwPli6JZmuho/X1VsB67W+AjU=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","Card","cardImages","matched","App","cards","setCards","moves","setMoves","choiceOne","setChoiceOne","choiceTwo","setChoiceTwo","disabled","setDisabled","shuffleCards","shuffledCards","sort","Math","random","map","card","id","handleChoice","src","prevCards","setTimeout","resetMove","console","log","prevMoves"],"sources":["C:/Users/Aleksandre/Assignment2/src/App.js"],"sourcesContent":["import './App.css'\r\nimport { React, useState, useEffect } from 'react';\r\nimport Card from \"./components/Card\";\r\n\r\nconst cardImages = [\r\n  { \"src\": \"/img/butterfly.jpg\", matched: false },\r\n  { \"src\": \"/img/cat.jpg\", matched: false },\r\n  { \"src\": \"/img/dog.jpg\", matched: false },\r\n  { \"src\": \"/img/hedgehog.jpg\", matched: false },\r\n  { \"src\": \"/img/panda.jpg\", matched: false },\r\n  { \"src\": \"/img/penguin.jpg\", matched: false },\r\n  { \"src\": \"/img/fish.jpg\", matched: false },\r\n  { \"src\": \"/img/flamingo.jpg\", matched: false }\r\n]\r\n\r\nfunction App() {\r\n  const [cards, setCards] = useState([])\r\n  const [moves, setMoves] = useState(0)\r\n  const [choiceOne, setChoiceOne] = useState(null)\r\n  const [choiceTwo, setChoiceTwo] = useState(null)\r\n  const [disabled, setDisabled] = useState(false)\r\n\r\n\r\n  // shuffles cards \r\n  const shuffleCards = () => {\r\n    const shuffledCards = [ ...cardImages, ...cardImages ]\r\n    .sort(() => Math.random() - 0.5)\r\n    .map((card) => ({ ...card, id: Math.random() }))\r\n\r\n    setCards(shuffledCards)\r\n    setMoves(0)\r\n    setChoiceOne(null)\r\n    setChoiceTwo(null)\r\n  }\r\n\r\n  // handle a choice\r\n  const handleChoice = (card) => {\r\n    choiceOne ? setChoiceTwo(card) : setChoiceOne(card)\r\n  }\r\n\r\n  // compare 2 selected cards\r\n  useEffect(() => {\r\n    if (choiceOne && choiceTwo) {\r\n      setDisabled(true)\r\n      if (choiceOne.src === choiceTwo.src) {\r\n        setCards(prevCards => {\r\n          return (prevCards.map(card => {\r\n            if (card.src === choiceOne.src) {\r\n              setTimeout(() => 5000)\r\n              return {...card, matched: true}\r\n            } \r\n            else {\r\n              return card\r\n            }\r\n          }))\r\n        })\r\n        resetMove()\r\n      } \r\n      else {\r\n        setTimeout(() => resetMove(), 1250)\r\n      }\r\n    }\r\n\r\n  }, [choiceOne, choiceTwo])\r\n\r\n  console.log(cards)\r\n\r\n  // reset moves & increase turn \r\n  const resetMove = () => {\r\n    setChoiceOne(null)\r\n    setChoiceTwo(null)\r\n    setMoves(prevMoves => prevMoves + 1 )\r\n    setDisabled(false)\r\n  }\r\n\r\n  // start a game automatically on page visit\r\n  useEffect(() => {\r\n    shuffleCards()\r\n  }, [])\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <h1>Game of Memory: Animals</h1>\r\n      <button onClick={shuffleCards}> New Game </button>\r\n      <h4>Moves: {moves}</h4>\r\n\r\n      <div className=\"board\"> \r\n        {cards.map(card => (\r\n          <Card \r\n            key={card.id} \r\n            card={card} \r\n            handleChoice={handleChoice}\r\n            flipped={card === choiceOne || card === choiceTwo || card.matched}\r\n            disabled={disabled}\r\n          />\r\n        ))}\r\n      </div>\r\n\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}